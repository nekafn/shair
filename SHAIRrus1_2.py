def shaircrypt(name):
    transtable = (
        (u"а", u"/-) "),
        (u"б", u"|0- "),
        (u"в", u"|00 "),
        (u"г", u"|- "),
        (u"д", u"|_||-| "),
        (u"е", u"|_- "),
        (u"ё", u"|_-.. "),
        (u"ж", u"\/|\/ "),
        (u"з", u"_-- "),
        (u"и", u"|/| "),
        (u"й", u"|/|' "),
        (u"к", u"|/) "),
        (u"л", u".|-| "),
        (u"м", u"/)/) "),
        (u"н", u"|-| "),
        (u"о", u"|_-| "),
        (u"п", u"||-|| "),
        (u"р", u"||0 "),
        (u"с", u"|-- "),
        (u"т", u"|__ "),
        (u"у", u"\/ "),
        (u"ф", u"0|0 "),
        (u"х", u")( "),
        (u"ц", u"|_|, "),
        (u"ч", u"(_| "),
        (u"ш", u"|_|_| "),
        (u"щ", u"|||) "),
        (u"ы", u"|0| "),
        (u"ю", u"|-0 "),
        (u"э", u"__--- "),
        (u"я", u"0() "),
        (u"ъ", u"'|0 "),
        (u"ь", u"|0 "),
        (u"А", u"/-)b "),
        (u"Б", u"|0-b "),
        (u"В", u"|00b "),
        (u"Г", u"|-b "),
        (u"Д", u"|_||-|b "),
        (u"Е", u"|_-b "),
        (u"Ё", u"|_-..b "),
        (u"Ж", u"\/|\/b "),
        (u"З", u"_--b "),
        (u"И", u"|/|b "),
        (u"Й", u"|/|'b "),
        (u"К", u"|/)b "),
        (u"Л", u".|-|b "),
        (u"М", u"/)/)b "),
        (u"Н", u"|-|b "),
        (u"О", u"|_-|b "),
        (u"П", u"||-||b "),
        (u"Р", u"||0b "),
        (u"С", u"|--b "),
        (u"Т", u"|__b "),
        (u"У", u"\/b "),
        (u"Ф", u"0|0b "),
        (u"Х", u")(b "),
        (u"Ц", u"|_|,b "),
        (u"Ч", u"(_|b "),
        (u"Ш", u"|_|_|b "),
        (u"Щ", u"|||)b "),
        (u"Ы", u"|0|b "),
        (u"Ю", u"|-0b "),
        (u"Э", u"__---b "),
        (u"Я", u"0()b "),
        (u"Ъ", u"'|0b "),
        (u"Ь", u"|0b "),
        
    )
    for symb_in, symb_out in transtable:
        name = name.replace(symb_in, symb_out)
    return(print(name))

def shairdecrypt(name):
    transtable = (
        (u"/-) ", u"а"),
        (u"|0- ", u"б"),
        (u"|00 ", u"в"),
        (u"|- ", u"г"),
        (u"|_||-| ", u"д"),
        (u"|_- ", u"е"),
        (u"|_-.. ", u"ё"),
        (u"\/|\/ ", u"ж"),
        (u"_-- ", u"з"),
        (u"|/| ", u"и"),
        (u"|/|' ", u"й"),
        (u"|/) ", u"к"),
        (u".|-| ", u"л"),
        (u"/)/) ", u"м"),
        (u"|-| ", u"н"),
        (u"|_-| ", u"о"),
        (u"||-|| ", u"п"),
        (u"||0 ", u"р"),
        (u"|-- ", u"с"),
        (u"|__ ", u"т"),
        (u"\/ ", u"у"),
        (u"0|0 ", u"ф"),
        (u")( ", u"х"),
        (u"|_|, ", u"ц"),
        (u"(_| ", u"ч"),
        (u"|_|_| ", u"ш"),
        (u"|0| ", u"ы"),
        (u"|-0 ", u"ю"),
        (u"__--- ", u"э"),
        (u"'|0 ", u"ъ"),
	    (u"|0 ", u"ь"),
        (u"0() ", u"я"),
        (u"|||) ", u"щ"),
		(u"/-)b ", u"А"),
        (u"|0-b ", u"Б"),
        (u"|00b ", u"В"),
        (u"|-b ", u"Г"),
        (u"|_||-|b ", u"Д"),
        (u"|_-b ", u"Е"),
        (u"|_-..b ", u"Ё"),
        (u"\/|\/b ", u"Ж"),
        (u"_--b ", u"З"),
        (u"|/|b ", u"И"),
        (u"|/|'b ", u"Й"),
        (u"|/)b ", u"К"),
        (u".|-|b ", u"Л"),
        (u"/)/)b ", u"М"),
        (u"|-|b ", u"Н"),
        (u"|_-|b ", u"О"),
        (u"||-||b ", u"П"),
        (u"||0b ", u"Р"),
        (u"|--b ", u"С"),
        (u"|__b ", u"Т"),
        (u"\/b ", u"У"),
        (u"0|0b ", u"Ф"),
        (u")(b ", u"Х"),
        (u"|_|,b ", u"Ц"),
        (u"(_|b ", u"Ч"),
        (u"|_|_|b ", u"Ш"),
        (u"|0|b ", u"Ы"),
        (u"|-0b ", u"Ю"),
        (u"__---b ", u"Э"),
        (u"'|0b ", u"Ъ"),
	    (u"|0b ", u"Ь"),
        (u"0()b ", u"Я"),
        (u"|||)b ", u"Щ"),
        
        
    )
    for symb_in, symb_out in transtable:
        name = name.replace(symb_in, symb_out)
    return(print(name))

print (" _____ _   _   ___  ___________ ")
print ("/  ___| | | | / _ \|_   _| ___ \ ")
print ("\ `--.| |_| |/ /_\ \ | | | |_/ /")
print (" `--. \  _  ||  _  | | | |    / ")
print ("/\__/ / | | || | | |_| |_| |\ \ ")
print ("\____/\_| |_/\_| |_/\___/\_| \_|")
print ("Russian Ver. 1.2")
print ("----------------------------------------------")
print ("Копируйте все пробелы, без них весь шифр не расшифруется! (если текст всё таки не расшифровывается, попробуйте добавить пробел в конце)")
print ("----------------------------------------------")
def decrypting():
    name = input("Введите текст которое надо расшифровать: ")
    shairdecrypt(name)
    choose()

def crypting():
    name = input("Введите текст которое надо зашифровать: ")
    shaircrypt(name)
    choose()

def choose():
    while True:
        print('(З)ашифровать или (р)асшифровать? Или вообще (в)ыйти?')
        mode = input().lower()
        if mode in 'р'.split():
            return decrypting()
        if mode in 'з'.split():
            return crypting()
        if mode in 'в'.split():
            return quit()
        else:
            print('Неправильно! Попробуй, ещё, раз.')
mode = choose()











